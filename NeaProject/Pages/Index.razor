@page "/"
@using System.Runtime.CompilerServices
@using NeaProject.Engine
@using SkiaSharp;
@using SkiaSharp.Views.Blazor;
@using NeaProject.Classes;
@using System.Drawing;

<div style="background-color:#955">
                <SKCanvasView 
                    OnPaintSurface="OnPaintSurface" 
                    IgnorePixelScaling="true"
                    EnableRenderLoop="true" 
                    style="width:640px; height:320px; margin:auto; display:block"/>
</div>

<div style="background-color:#559">
    <table class="table-center">
        <tr>
            <td style="width:16%;" rowspan="2">wooa</td>
            <td rowspan="2">woob</td>
            <td style="width:8%">wooc</td>
            <td class="stat" style="width:8%">wood</td>
        </tr>
        <tr>
            <td>wooe</td>
            <td class ="stat">woof</td>
        </tr>
        <tr>
            <td rowspan="4"><img src="/images/player1.png" style="width:100%" /></td>
            <td>wooh</td>
            <td rowspan="2">wooi</td>
            <td class="stat" rowspan="2">HP: @(player?.CurrentHp ?? 0)</td>
        </tr>
        <tr>
            <td>wook</td>
        </tr>
        <tr>
            <td>wool</td>
            <td rowspan="2">woom</td>
            <td class="stat" rowspan="2">woon</td>
        </tr>
        <tr>
            <td>wooo</td>
        </tr>
    </table>
</div>

<div>
    <button
        @ref="buttonRef"
        class="massive-invisible-button"
        @onkeydown="KeyDown">
        Pressed Key: @(lastPressed ?? "Nothing pressed yet")
    </button>
</div>


@code {
    // Worth noting that the renderer is about 50% slower when you use Web GL. My assumption is that you end up
    // interop-ing more than it seems, another copy of the byte array for the surface would cause about the level of
    // slowdown I saw. But 2D canvas is fine - after all, just a 2D game.

    const int ViewportZoom = 1;
    const int ViewportWidth = 640 * ViewportZoom;
    const int ViewportHeight = 320 * ViewportZoom;
    const string PlayerSprite = @"
................................
................................
...........bbbb.................
..........bbbbbbbuup............
.........bbmbbuubbuup...........
........bpmbbuuuhbbuub..........
........ppbbuuuhshbbuub.........
........pmbuuuhssshbbub.........
.......bpbuuuessssehbbu.........
.......pbuuhhesssseshsu.........
.......pbuusssshhssssb..........
.......mbubssssssssssb..b.......
........bbubhsssssssubbb........
........bb.bbbhsssubuub.........
.........b...mhhhhm.............
...........mmpmmmmpmm...........
..........mppppppppppm..........
.........mppppppppppppm.........
.........mppppppppppppm.........
........mpppmppppppmpppm........
........mpppmppppppmpppm........
........mppmppppppppmppm........
........mppmppppppppmppm........
........mppmppppppppmppm........
.........mmdmmmmmmmmdmm.........
...........dddddddddd...........
...........drrrrdrrrd...........
...........drrrrdrrrd...........
...........ddrrrdrrdd...........
...........drrrrdrrrd...........
..........eeeeekkkeeee..........
..........eeeekkkkkeee..........";

    private Map? map;
    private Player? player;
    private Dictionary<char, Sprite?>? _sprites;
    private FpsCounter? _fpsCounter;
    private Renderer? _renderer;
    private SKBitmap? _bitmap;

    private int currentCount = 0;
    private string? lastPressed;
    private ElementReference buttonRef;

    private void IncrementCount()
    {
        currentCount++;
    }

    private void KeyDown(KeyboardEventArgs keyEvent)
    {
        if (player == null)
        {
            return; 
        }
        var pressedKey = keyEvent.Key;
        lastPressed = pressedKey;
        pressedKey = pressedKey.ToLower();
        switch (pressedKey)
        {
            case "arrowup":
            case "w":
                {
                    player.Move(0, -1);
                    break;
                }
            case "arrowdown":
            case "s":
                {
                    player.Move(0, 1);
                    break;
                }
            case "arrowleft":
            case "a":
                {
                    player.Move(-1, 0);
                    break;
                }
            case "arrowright":
            case "d":
                {
                    player.Move(1, 0);
                    break;
                }
            default:
                {
                    break;
                }

        }
    }

    protected override async Task OnInitializedAsync()
    {
        Uri tileSheetUri = new Uri("http://localhost:5235/images/MapTiles/all_tiles.png"); // absolute for now, should be relative
        Uri mapUri = new Uri("http://localhost:5235/map-data/map_0.txt");
        string mapString = await DownloadAsync(mapUri);
        map = new Map(mapString);
        player = new Player(map);
        ImageLoader imageLoader = new ImageLoader();
        SKBitmap mapTileSheet = await ImageLoader.GetBitmapAsync(tileSheetUri);
        _sprites = new Dictionary<char, Sprite?>()
        {
            { '.', null},
            { 'g', new Sprite(mapTileSheet, "Grass")},
            { 'p', new Sprite(PlayerSprite, "Player")},
            { 'r', new Sprite(mapTileSheet, "Rock")},
            { 's', new Sprite(mapTileSheet, "Sand")},
            { 'w', new Sprite(mapTileSheet, "Water")}
        };

        _fpsCounter = new FpsCounter();
        _renderer = new Renderer(map, player, _sprites, ViewportWidth, ViewportHeight);
        _bitmap = new SKBitmap(ViewportWidth, ViewportHeight);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await buttonRef.FocusAsync();
        }
    }

    protected void OnPaintSurface(SKPaintSurfaceEventArgs e)
    {
        if (_renderer == null || _bitmap == null || _fpsCounter == null)
        {
            return;
        }
        // Their is a good article on the different ways to update pixel data here:
        //  https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/graphics/skiasharp/bitmaps/pixel-bits
        // Having tried them all maintaining and then setting the pixel byte array is the most performant for us.
        
        unsafe
        {
            fixed (uint* ptr = _renderer.UpdateFrameBuffer())
            {
                _bitmap.SetPixels((IntPtr)ptr);
            }
        }
        
        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.White);
        canvas.DrawBitmap(_bitmap, new SKRect(0, 0, ViewportWidth*1, ViewportHeight*1));
        var fps = _fpsCounter.GetCurrentFps();
        using var paint = new SKPaint
        {
            IsAntialias = true,
            StrokeWidth = 5f,
            StrokeCap = SKStrokeCap.Round,
            TextAlign = SKTextAlign.Center,
            TextSize = 24,
        };

        var surfaceSize = e.Info.Size;
        canvas.DrawText($"{fps:0.00}fps", surfaceSize.Width / 2, surfaceSize.Height - 10f, paint);
    }

    public async static Task<string> DownloadAsync(Uri uri)
    {
        using var client = new HttpClient();
        var content = await client.GetStringAsync(uri);
        return content;
    }
    
    
}