@page "/"
@using System.Runtime.CompilerServices
@using NeaProject.Engine
@using SkiaSharp;
@using SkiaSharp.Views.Blazor;
@using NeaProject.Classes;

<div style="background-color:#955">
    <div class="container center">
        <div class="row">
            <div class="canvas-container">
                <SKCanvasView OnPaintSurface="OnPaintSurface" IgnorePixelScaling="true" EnableRenderLoop="true" />
            </div>
        </div>
    </div>
</div>

<div style="background-color:#559">
    <table class="table-center">
        <tr>
            <td style="width:16%;" rowspan="2">wooa</td>
            <td rowspan="2">woob</td>
            <td style="width:8%">wooc</td>
            <td class="stat" style="width:8%">wood</td>
        </tr>
        <tr>
            <td>wooe</td>
            <td class ="stat">woof</td>
        </tr>
        <tr>
            <td rowspan="4"><img src="/images/player1.png" style="width:100%" /></td>
            <td>wooh</td>
            <td rowspan="2">wooi</td>
            <td class="stat" rowspan="2">HP: @player.CurrentHp</td>
        </tr>
        <tr>
            <td>wook</td>
        </tr>
        <tr>
            <td>wool</td>
            <td rowspan="2">woom</td>
            <td class="stat" rowspan="2">woon</td>
        </tr>
        <tr>
            <td>wooo</td>
        </tr>
    </table>
</div>

<div>
    <button
        @ref="buttonRef"
        class="massive-invisible-button"
        @onkeydown="KeyDown">
        Pressed Key: @(lastPressed ?? "Nothing pressed yet")
    </button>
</div>


@code {
    // Worth noting that the renderer is about 50% slower when you use Web GL. My assumption is that you end up
    // interop-ing more than it seems, another copy of the byte array for the surface would cause about the level of
    // slowdown I saw. But 2D canvas is fine - after all, just a 2D game.

    const int WolfViewportZoom = 1;
    const int WolfViewportWidth = 320 * WolfViewportZoom;
    const int WolfViewportHeight = 160 * WolfViewportZoom;

    private static readonly Map map = new Map();
    private static readonly Player player = new Player(map);
    private readonly FpsCounter _fpsCounter = new FpsCounter();
    private readonly Renderer _renderer = new Renderer(map, player, WolfViewportWidth, WolfViewportHeight);
    private readonly SKBitmap _bitmap = new SKBitmap(WolfViewportWidth, WolfViewportHeight);

    private int currentCount = 0;
    private string? lastPressed;
    private ElementReference buttonRef;

    private void IncrementCount()
    {
        currentCount++;
    }

    private void KeyDown(KeyboardEventArgs e)
    {
        var pressedKey = e.Key;
        lastPressed = pressedKey;
        pressedKey = pressedKey.ToLower();
        switch (pressedKey)
        {
            case "arrowup":
            case "w":
                {
                    player.Move(0, -1);
                    break;
                }
            case "arrowdown":
            case "s":
                {
                    player.Move(0, 1);
                    break;
                }
            case "arrowleft":
            case "a":
                {
                    player.Move(-1, 0);
                    break;
                }
            case "arrowright":
            case "d":
                {
                    player.Move(1, 0);
                    break;
                }
            default:
                {
                    break;
                }

        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await buttonRef.FocusAsync();
        }
    }
    
    protected void OnPaintSurface(SKPaintSurfaceEventArgs e)
    {
        // Their is a good article on the different ways to update pixel data here:
        //  https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/graphics/skiasharp/bitmaps/pixel-bits
        // Having tried them all maintaining and then setting the pixel byte array is the most performant for us.
        
        unsafe
        {
            fixed (uint* ptr = _renderer.UpdateFrameBuffer())
            {
                _bitmap.SetPixels((IntPtr)ptr);
            }
        }
        
        var canvas = e.Surface.Canvas;
        canvas.Clear(SKColors.White);
        canvas.DrawBitmap(_bitmap, new SKRect(0, 0, WolfViewportWidth*1, WolfViewportHeight*1));
        var fps = _fpsCounter.GetCurrentFps();
        using var paint = new SKPaint
        {
            IsAntialias = true,
            StrokeWidth = 5f,
            StrokeCap = SKStrokeCap.Round,
            TextAlign = SKTextAlign.Center,
            TextSize = 24,
        };

        var surfaceSize = e.Info.Size;
        canvas.DrawText($"{fps:0.00}fps", surfaceSize.Width / 2, surfaceSize.Height - 10f, paint);
    }
    
    
}